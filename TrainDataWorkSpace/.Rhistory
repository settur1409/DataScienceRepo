sapply(df2[,2:3], max)
max_list = sapply(bollywood[,4:7],max)
max_list
max(bollywood$Fwcollection)
sapply(df2[,2:3], max, na.rm = TRUE)
max_list = sapply(bollywood[,4:7],max, na.rm = TRUE)
max_list
for (i in length(max_list)) {
}
for (i in length(max_list)) {
max_val = sapply(bollywood$Ocollection, function(x) bollywood$Movie[which(x == max(bollywood$Ocollection))]
)
max_val
max_val = sapply(bollywood$Ocollection, function(x) bollywood$Movie[which(x == max(bollywood$Ocollection)))
max_val = sapply(bollywood$Ocollection, function(x) bollywood$Movie[which(x == max(bollywood$Ocollection))])
max_val
max_val = sapply(bollywood$Ocollection, function(x) as.character(bollywood$Movie[which(x == max(bollywood$Ocollection))])
)
max_val = sapply(bollywood$Ocollection, function(x) as.character(bollywood$Movie[which(x == max(bollywood$Ocollection))]))
max_val
max_val = sapply(bollywood$Ocollection, function(x) as.character(bollywood$Movie[which(x == max(bollywood$Ocollection))]))
max_val[which(is.na(max_val) == FALSE)]
?sapply(list, function)
?sapply
Popularity <- read.csv("C:/Personnel/Upgrad_Training/OnlineNewsPopularity/OnlineNewsPopularity.csv", header=FALSE)
View(Popularity)
Popularity$weekday_is_monday
Popularity$[1]
Popularity[1,]
headers = Popularity[1,]
Popularity_df = data.frame(Popularity, headers = headers)
?data.frame
library(readr)
OnlinePopularity <- read_csv("C:/Personnel/Upgrad_Training/OnlineNewsPopularity/OnlineNewsPopularity.csv")
View(OnlinePopularity)
install.packages(tidyr)
install.packages(c("tidyr", "dplyr"))
library(tidyr)
data = gather(OnlinePopularity, channel, channelVal, data_channel_is_lifestyle:data_channel_is_world)
data = gather(OnlinePopularity, day, dayval, weekday_is_monday:weekday_is_sunday)
library(dplyr)
filter(data, data$is_weekend ==0)
length(filter(data, data$is_weekend ==0))
length(filter(data, is_weekend ==0))
summarise(data, mean(shares))
summarise(data, sum(shares, na.rm=TRUE))
data$is_weekend = as.factor(data$is_weekend)
summary(data$is_weekend)
View(data)
which(data$dayval == 0)
data_temp = data[-which(data$is_weekend ==0),]
data_temp$is_weekend = as.factor(data_temp$is_weekend)
summary(data_temp$is_weekend)
summary(data$is_weekend)
?count()
databy_day = group_by(data, is_weekend)
summary(databy_day)
length(select(data, is_weekday))
length(select(data, is_weekend))
length(select(data, is_weekend==0))
View(bollywood)
rm("data")
rm("data_temp")
library(tidyr)
library(dplyr)
data = gather(OnlinePopularity, key=day, value=dayOfWeek, weekday_is_monday:weekday_is_sunday)
str(data)
which(data$dayOfWeek == 0)
length(which(data$dayOfWeek == 0))
data = data[-which(data$dayOfWeek == 0),0]
summary(pop_days$is_weekend)
summary(data$is_weekend)
summary(data$is_weekday)
columns(data)
colnames(data)
View(data)
data = gather(OnlinePopularity, key=day, value=dayOfWeek, weekday_is_monday:weekday_is_sunday)
data = data[-which(data$dayOfWeek == 0),]
summary(data$is_weekend)
data$is_weekend = as.factor(data$is_weekend)
summary(data$is_weekend)
?arregate
library(dplyr)
?aggregate
aggregate(shares~is_weekday, data, mean
)
str(data)
aggregate(shares~dayOfWeek, data, mean())
aggregate(shares~dayOfWeek, data, mean
)
aggregate(shares~is_weekend, data, mean)
?group_by
weekend_grouping = group_by(.data = data, is_weekend)
weekend_grouping
summary(weekend_grouping)
summarise(.data = data, mean(shares))
summarise(.data = weekend_grouping, mean(shares))
daywise_grouping = group_by(.data = data, day)
summarise(.data = daywise_grouping, mean(shares))
View(data)
data = gather(data, key=channel, value = channelVal, data_channel_is_lifestyle:data_channel_is_world)
channelwise_grouping = group_by(.data = data, channelVal)
str(data$channelVal)
str(data$channel)
channelwise_grouping = group_by(.data = data, channel)
summarise(.data = channelwise_grouping, mean(shares))
data = data[-which(data$channelVal == 0),]
channelwise_grouping = group_by(.data = data, channel)
summarise(.data = channelwise_grouping, mean(shares))
data["570"]
data[57,]
install.packages(c("sqldf", "stringr"))
sqldf::sqldf("select channel,avg(shares) from data group by channel")
library(readr)
rounds2 <- read_csv("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/rounds2.csv")
View(rounds2)
?tolower
rounds2$company_permalink = tolower(rounds2$company_permalink)
library(readr)
rounds2 <- read_csv("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/rounds2.csv")
View(rounds2)
rounds2$company_permalink = tolower(rounds2$company_permalink)
?tolower
?Encoding
Encoding(rounds2$company_permalink) = "UTF-8"
rounds2$company_permalink = tolower(rounds2$company_permalink)
Encoding(rounds2$company_permalink) <- "UTF-8"
rounds2$company_permalink2 = tolower(rounds2$company_permalink)
Encoding(rounds2$company_permalink)
class(rounds2$company_permalink)
?Encoding
enc2utf8(rounds2$company_permalink)
which(Encoding(rounds2$company_permalink) == 'UNKNOWN')
rounds2$company_permalink2 = tolower(rounds2$company_permalink)
rm("rounds2")
library(readr)
rounds2 <- read_csv("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/rounds2.csv")
View(rounds2)
library(diplr)
library(dplyr)
library(tidyr)
?seperate
?separate
?mutate()
?separate
separate(data = rounds2, col = company_permalink, into = seprated_tobe_merged, sep = "/")
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
df %>% separate(x, c("A", "B"))
rm("rounds2")
library(readr)
rounds2 <- read_csv("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/rounds2.csv")
View(rounds2)
rounds2$link1 = tolower(rounds2$link1)
?replace()
rounds2$link1 = replace(rounds2$link1, c("/organizatoin/"), c("/Organization/"))
rounds2$link1
rounds2$link2[0]
rounds2$link2[1]
rounds2$link2[1] = "-fame"
rounds2$link2[3] = "-QOUNTER"
?gather
gather(rounds2, key = new_company_permalink, value = link1:link2)
rounds3 = gather(rounds2, key = new_company_permalink, value = link1:link2)
View(rounds3)
rounds3 = gather(rounds2, key = link1:link2, value = company_permalink2)
View(rounds3)
rm(rounds3)
?gather
rounds3 = gather(rounds2, key = clubbed, value = company_permalink2, link1, link2)
View(rounds3)
?merge
?paste
?with
?unite
rounds4 = unite(rounds2, col = company_permalink2, link1,link2, sep = "")
View(rounds4)
getwd()
write.csv(rounds4, file = "rounds4.csv")
sqldf::sqldf("select count(distinct company_permalink2) from rounds4");
sqldf::sqldf("select count(company_permalink2) from rounds4");
library(readr)
companies <- read_delim("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/companies.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(companies)
sqldf::sqldf("select count(permalink) from companies");
lists_of_companies = sqldf::sqldf("select distinct company_permalink2 from rounds4");
lists_of_companies
length(lists_of_companies)
size(lists_of_companies)
lists_of_companies2 = sqldf::sqldf("select distinct permalink from companies");
paste(lists_of_companies, lists_of_companies2)
merged_companies = paste(lists_of_companies, lists_of_companies2, sep = ",")
View(merged_companies)
rm("merged_companies")
?unite
View(lists_of_companies)
View(lists_of_companies2)
lists_of_companies = tolower(lists_of_companies)
sqldf::sqldf("select count(distinct permalink) from lists_of_companies");
lists_of_companies
lists_of_companies = sqldf::sqldf("select distinct company_permalink2 from rounds4");
tolower(lists_of_companies)
tolower(lists_of_companies[10])
?tolower
library(dplyr)
library(tidyr)
library(readr)
ted_main <- read_csv("C:/Personnel/DummyData/ted-talks/ted_main.csv",
col_types = cols(published_date = col_date(format = "%m/%d/%Y")))
View(ted_main)
max_views_TEDID = ted_main$event[which(ted_main$views == max(ted_main$views))]
max_views_TEDID
max_views_speaker = ted_main$main_speaker[which(ted_main$views == max(ted_main$views))]
max_views_speaker
max(ted_main$views)
ken_subset = subset(ted_main, main_speaker = "Ken Robinson")
View(ken_subset)
ken_subset_max_num_languages = ken_subset$languages[which(ken_subset$views == max(ken_subset$views))]
ken_subset_max_num_languages
max(ted_main$languages)
ted_main$event[which(ted_main$languages == 72)]
ted_main$main_speaker[which(ted_main$languages == 72)]
?group_by
?sapply
?group_by
TED2006_group = group_by(.data = ted_main, event = TED2006)
ratings_group = group_by(.data = ted_main, ratings)
ratings_group
View(ratings_group)
ratings_group = ted_main$ratings
TEDID_group = group_by(.data = ted_main, event)
TEDID_group
sector_list = c("Advertising|Image Recognition|Sales and Marketing|Social Media|Social Media Advertising")
library(stringr)
str_split(sector_list, "|")
str_split(sector_list)
str_split(sector_list, "~")
stringr::str_split(sector_list, " ")[[1]]
stringr::str_split(sector_list, "|")[[1]]
install.packages("tokenizers")
?tokenize_sentences
tokenize_sentences
tokenizers::tokenize_lines(sector_list)
tokenizers::tokenize_words(sector_list, stopwords = "|")
tokenizers::tokenize_words(sector_list, stopwords = "|")
tokenizers::tokenize_word_stems(sector_list, stopwords = "|")
Clean_String(sector_list)
library(stringr)
Clean_String(sector_list)
strsplit(sector_list, split = "|")
pwd
strsplit(sector_list, split = " ")
?strsplit
strsplit(sector_list, split = "|", fixed = TRUE)
sectors = strsplit(sector_list, split = "|", fixed = TRUE)
View(companies)
category_list = companies$category_list
sapply(category_list, function(x) { y = strsplit(x, split = "|", fixed = TRUE); paste(x,y)})
junk_trial = sapply(category_list, function(x) { y = strsplit(x, split = "|", fixed = TRUE); paste(x,y)})
View(junk_trial)
junk_trial = sapply(category_list, function(x) { x = strsplit(x, split = "|", fixed = TRUE);})
View(junk_trial)
junk_trial = sapply(category_list, function(x) {strsplit(x, split = "|", fixed = TRUE);})
sapply(category_list, function(x) {strsplit(x, split = "|", fixed = TRUE);})
category_list
sector_list
pwd
library(readr)
rounds2 <- read_csv("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/rounds2.csv")
View(rounds2)
library(dplyr)
library(tidyr)
company_permalink_local = rounds2$company_permalink
company_df <- data.frame(company_list = c(company_permalink_local))
df2 = separate(company_df, company_list, c('link1','link2'), sep = 14)
link3 = tolower(df2$link2)
unique_list1 = unique(link3)
length(unique_list1)
rm("rounds2")
rm("company_df")
rm("df2")
rm("list3")
rm("link3")
rm("unique_list1")
library(readr)
rounds2 <- read_csv("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/rounds2.csv")
View(rounds2)
round2 = round2
company_permalink_local = round2$company_permalink
company_df <- data.frame(company_list = c(company_permalink_local))
df2 = separate(company_df, company_list, c('link1','link2'), sep = 14)
round2 = rounds2
company_permalink_local = round2$company_permalink
company_df <- data.frame(company_list = c(company_permalink_local))
df2 = separate(company_df, company_list, c('link1','link2'), sep = 14)
link3 = unique(tolower(df2$link2))
length(link3)
df2$link2 = tolower(df2$link2)
library(readr)
mapping <- read_csv("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/mapping.csv")
View(mapping)
?gather
long_format = gather(data = mapping, key = "sector", value = 'Automotive & Sports':'Social,Finance,Analytics,Advertising')
View(long_format)
long_format = gather(data = mapping, key = main_sector, value = sector_val, 'Automotive & Sports':'Social,Finance,Analytics,Advertising')
colnames(mapping)
long_format = gather(data = mapping, key = main_sector, value = sector_val, 'Automotive & Sports':'Social, Finance, Analytics, Advertising')
View(long_format)
long_format$sector_val[-which(long_format$sector_val) == 0]
long_format$sector_val[-which(long_format$sector_val == 0)]
long_format$sector_val = long_format$sector_val[-1]
long_format[-1]
-long_format[1]
long_format = -long_format[1]
load("C:/Personnel/Upgrad_Training/InvestmentCaseStudy/.RData")
View(master_frame)
sqldf("select country_code, sum(raised_amount_usd) from master_frame where funding_round_type='venture' group by country_code having country_code !='NA' order by sum(raised_amount_usd) desc limit 9");
library(sqldf)
sqldf("select country_code, sum(raised_amount_usd) from master_frame where funding_round_type='venture' group by country_code having country_code !='NA' order by sum(raised_amount_usd) desc limit 9");
install.packages("countrycode")
library(countrycode)
country_list <- c("United States","India","Philippines","Nigeria","United Kingdom", "Germany","Canada","France","Australia","Italy")
country_list1 <- countrycode(country_list, 'country.name', 'iso3c')
eng_country <-data.frame(country_list1)
colnames(eng_country) <- "code"
eng_country
top_eng<-data.frame(sqldf("select code from eng_country
inner join top9 on top9.country_code=eng_country.code
limit 3"))
top9 <- data.frame(sqldf("select country_code, sum(raised_amount_usd) from master_frame where funding_round_type='venture'
group by country_code having country_code !='NA' order by sum(raised_amount_usd) desc limit 9"))
top_eng<-data.frame(sqldf("select code from eng_country
inner join top9 on top9.country_code=eng_country.code
limit 3"))
top_eng
View(mapping)
library(tidyr)
sector_map <- gather(mapping, sector,val, Automotive...Sports:Social..Finance..Analytics..Advertising)
colnames(mapping)
sector_map <- gather(mapping, sector,val, Automotive & Sports:Social, Finance, Analytics, Advertising)
sector_map <- gather(mapping, sector,val, 'Automotive & Sports':'Social, Finance, Analytics, Advertising')
sector_map
ector_map1 <- sector_map[!(sector_map$val==0),]
ector_map1
ector_map1 <- sector_map[!(sector_map$val==0),1:2]
ector_map1
ector_map1 <- sector_map[!(sector_map$val==0),2]
ector_map1
ector_map1 <- sector_map[!(sector_map$val==0),1:2]
ector_map1
ector_map1 <- sector_map[!(sector_map$val==0),'val']
ector_map1
ector_map1 <- sector_map[!(sector_map$val==0),1:2]
ector_map1
nrow(sector_map)+1
sector_map[6193]
sector_map[6193,]
sector_map[6192,]
sector_map <- sector_map[!(sector_map$val==0),1:2]
sector_map[as.integer(nrow(sector_map)+1), ]<-"NA"
sector_map[6193,]
sector_map[6192,]
sector_map[6191,]
sector_map[6190,]
sector_map[6189,]
which(sector_map$category_list != NA && sector_map$sector == NA)
which(sector_map$category_list != NA && sector_map$sector != NA)
which(sector_map$category_list != 'NA' && sector_map$sector != 'NA')
which(sector_map$category_list != 'NA' && sector_map$sector == 'NA')
is.na(sector_map$sector)
which(is.na(sector_map$sector) == TRUE)
which(is.na(sector_map$category_list) == TRUE)
sector_map[23,]
temp_category <- strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)
View(temp_category)
View(master_frame)
master_frame$temp_category <- strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)
?split
?strsplit
temp_category <- strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)
?do.call
do.call(rbind,temp_category)[,1]
do.call(rbind,temp_category)
do.call(rbind,temp_category)
strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)[1]
strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)
strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)[,1]
strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)[1,1]
strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)
strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)[996]
strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)[996,1]
strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)[996,]
class(temp_category)
master_frame[,"Primary_sector"]<-do.call(rbind,temp_category)[,1]
rbind(strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE)[,1])
rbind(strsplit(as.character(master_frame$category_list), split='|', fixed=TRUE))[,1]
master_frame[,"Main_sector"]<- data.frame(sqldf("select sector_map.sector from master_frame
left join sector_map on master_frame.Primary_sector=sector_map.category_list"))
master_frame[,"Primary_sector"]<-do.call(rbind,temp_category)[,1]
sqldf("select sector_map.sector from master_frame
left join sector_map on master_frame.Primary_sector=sector_map.category_list")
View(sector_map)
sqldf::sqldf("select master_frame.Primary_sector from master_frame join sector_map on master_frame.Primary_sector=sector_map.category_list")
sqldf::sqldf("select master_frame.Primary_sector from master_frame join sector_map on master_frame.Primary_sector=sector_map.category_list where master_frame.Primary_sector != NA)
")"
)
")
sqldf::sqldf("select master_frame.Primary_sector from master_frame join sector_map on master_frame.Primary_sector=sector_map.category_list where master_frame.Primary_sector != NA")
sqldf::sqldf("select master_frame.Primary_sector from master_frame join sector_map on master_frame.Primary_sector=sector_map.category_list where master_frame.Primary_sector != NA")
setwd("C:/Personnel/DummyData/TrainDataWorkSpace")
load("C:/Personnel/DummyData/TrainDataWorkSpace/.RData")
View(train_details)
trainNumFilter = subset(train_details, Train.No. == "'00851'")
tempfill = filter(train_details,  Train.No. == x , station.Code == y)
filter(train_details,  Train.No. == "'00851", station.Code == "BBS")
filter(train_details,  Train.No. = "'00851", station.Code = "BBS")
filter(train_details, station.Code == "BBS", Train.No. == "'00851")
filter(train_details, station.Code == "BBS" & Train.No. == "'00851")
library(dplyr)
library(tidyr)
filter(train_details, station.Code == "BBS" & Train.No. == "'00851")
filter(train_details, station.Code == BBS & Train.No. == "'00851")
filter(train_details, station.Code = "BBS" & Train.No. = '00851')
filter(train_details, station.Code == "BBS" & Train.No. == '00851')
filter(train_details, station.Code == "BBS" , Train.No. == '00851')
?filter
filter(train_details, station.Code == "BBS" & Train.No. == '00851')
filter(train_details, station.Code == "BBS" & Train.No. == "'00851'")
str(train_details$station.Code)
filter(train_details, station.Code == "BBS")
filter(train_details, station.Code == 'BBS')
filter(train_details, Train.No. == "'00851'")
filter(train_details, Train.No. == "'00851'" & station.Code == BBS)
filter(train_details, Train.No. == "'00851'" & station.Code == "BBS")
filter(train_details, Train.No. == "'00851'" & Station.Name == "BHUBANESWAR")
filter1 = filter(train_details, Train.No. == "'00851'")
filter2 = filter(filter1, station.Code == "BBS")
subset(filter1, station.Code == 'BBS')
subset(filter1, station.Code == "BBS")
str(train_details)
subset(filter1, station.Code == "BBS  ")
subset(filter1, station.Code == "BBS ")
filter(train_details, Train.No. == "'00851'" & Station.Code == "BBS ")
filter(train_details, Train.No. == "'00851'" & station.Code == "BBS ")
?trimws
train_details$station.Code = trimws(train_details$station.Code, which = c("both", "left", "right"))
View(train_details$station.Code)
train_details$station.Code
train_details = read.csv("isl_wise_train_detail_03082015_v1.csv", stringsAsFactors = FALSE)
train_details$station.Code = trimws(train_details$station.Code, which = c("both", "left", "right"))
getStationDetails <- function(x)
{
## type of input :: "'00851'"
trainNumFilter = subset(train_details, Train.No. == x)
return (data.frame(trainNumFilter$station.Code, trainNumFilter$Station.Name))
}
getTimeSlot <- function(x,y)
{
## type of input
##  x :: "'00851'"
##  y :: "BBS "
tempfill = filter(train_details,  Train.No. == x , station.Code == y)
return(data.frame(tempfill$Arrival.time, tempfill$Departure.time))
}
readvalues <- function()
{
#train_details = read.csv("isl_wise_train_detail_03082015_v1.csv", stringsAsFactors = FALSE)
#train_details$station.Code = trimws(train_details$station.Code, which = c("both", "left", "right"))
trainNum = readline(prompt = "Enter train number as string: ")
trainNumsearch = getStationDetails(trainNum)
print(trainNumsearch)
stationcode = readline(prompt = "Enter station code of your interest from above list as string :")
trainTimeSlotsearch = getTimeSlot(trainNum, stationcode)
print(trainTimeSlotsearch)
}
readvalues()
trainNumFilter = subset(train_details, Train.No. == "'00851'")
subset(train_details, Train.No. == "'00851'")
readvalues
readvalues()
readvalues()
readvalues()
rm(list = ls())
getStationDetails <- function(x)
{
## type of input :: "'00851'"
trainNumFilter = subset(train_details, Train.No. == x)
return (data.frame(trainNumFilter$station.Code, trainNumFilter$Station.Name))
}
getTimeSlot <- function(x,y)
{
## type of input
##  x :: '00851'
##  y :: BBS
tempfill = filter(train_details,  Train.No. == x , station.Code == y)
return(data.frame(tempfill$Arrival.time, tempfill$Departure.time))
}
readvalues <- function()
{
train_details = read.csv("isl_wise_train_detail_03082015_v1.csv", stringsAsFactors = FALSE)
train_details$station.Code = trimws(train_details$station.Code, which = c("left", "right"))
trainNum = readline(prompt = "Enter train number as string: ")
trainNumsearch = getStationDetails(trainNum)
print(trainNumsearch)
stationcode = readline(prompt = "Enter station code of your interest from above list as string :")
trainTimeSlotsearch = getTimeSlot(trainNum, stationcode)
print(trainTimeSlotsearch)
}
readvalues()
train_details = read.csv("isl_wise_train_detail_03082015_v1.csv", stringsAsFactors = FALSE)
train_details$station.Code = trimws(train_details$station.Code, which = c("left", "right"))
train_details$station.Code = trimws(train_details$station.Code, which = c("both", "left", "right"))
